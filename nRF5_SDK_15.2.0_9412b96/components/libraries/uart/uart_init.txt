static void uart0_event_handler (app_uart_evt_t * p_event);
static void uart1_event_handler (app_uart_evt_t * p_event);


APP_UART_DEF(uart0, 0, 256, uart0_event_handler);
APP_UART_DEF(uart1, 1, 256, uart1_event_handler);

static void uart1_event_handler (app_uart_evt_t * p_event)
{
//	static uint8_t data_array[BLE_LIGHT_S_MAX_DATA_LEN];
//    static uint8_t index = 0;
	u8 tmp;
    uint32_t       err_code;

    switch (p_event->evt_type)
    {
        case APP_UART_DATA_READY:
            UNUSED_VARIABLE(app_uart_get(&uart1, &tmp));

            while (app_uart_put(&uart1, tmp) == NRF_ERROR_BUSY);
            
            break;

        case APP_UART_COMMUNICATION_ERROR:
            APP_ERROR_HANDLER(p_event->data.error_communication);
            break;

        case APP_UART_FIFO_ERROR:
            APP_ERROR_HANDLER(p_event->data.error_code);
            break;

        default:
            break;
    }
}
#define UART1_RX_PIN_NUMBER		5
#define UART1_TX_PIN_NUMBER		NRF_GPIO_PIN_MAP(1,9)

static void uart0_event_handler (app_uart_evt_t * p_event)
{
//	static uint8_t data_array[BLE_LIGHT_S_MAX_DATA_LEN];
//    static uint8_t index = 0;
	u8 tmp;
    uint32_t       err_code;

    switch (p_event->evt_type)
    {
        case APP_UART_DATA_READY:
            UNUSED_VARIABLE(app_uart_get(&uart0, &tmp));

            while (app_uart_put(&uart0, tmp) == NRF_ERROR_BUSY);
            
            break;

        case APP_UART_COMMUNICATION_ERROR:
            APP_ERROR_HANDLER(p_event->data.error_communication);
            break;

        case APP_UART_FIFO_ERROR:
            APP_ERROR_HANDLER(p_event->data.error_code);
            break;

        default:
            break;
    }
}
#define UART0_RX_PIN_NUMBER		0
#define UART0_TX_PIN_NUMBER		NRF_GPIO_PIN_MAP(0,1)

void i_uart_init(void)
{
	uint32_t                     err_code;
    app_uart_comm_params_t const comm_params =
    {
        .rx_pin_no    = UART1_RX_PIN_NUMBER,
        .tx_pin_no    = UART1_TX_PIN_NUMBER,
        .rts_pin_no   = NRF_UART_PSEL_DISCONNECTED,// RTS_PIN_NUMBER,
        .cts_pin_no   = NRF_UART_PSEL_DISCONNECTED,//CTS_PIN_NUMBER,
        .flow_control = APP_UART_FLOW_CONTROL_DISABLED,
        .use_parity   = false,
#if defined (UART_PRESENT)
        .baud_rate    = NRF_UART_BAUDRATE_115200	//here
#else
        .baud_rate    = NRF_UARTE_BAUDRATE_115200
#endif
    };
    uart1.comm_params = &comm_params;
	err_code = app_uart_init(&uart1, &uart1_buffers, APP_IRQ_PRIORITY_LOWEST);
	APP_ERROR_CHECK(err_code);

	//uart 0 init
	app_uart_comm_params_t const comm_params_0 =
    {
        .rx_pin_no    = UART0_RX_PIN_NUMBER,
        .tx_pin_no    = UART0_TX_PIN_NUMBER,
        .rts_pin_no   = NRF_UART_PSEL_DISCONNECTED,// RTS_PIN_NUMBER,
        .cts_pin_no   = NRF_UART_PSEL_DISCONNECTED,//CTS_PIN_NUMBER,
        .flow_control = APP_UART_FLOW_CONTROL_DISABLED,
        .use_parity   = false,
#if defined (UART_PRESENT)
        .baud_rate    = NRF_UART_BAUDRATE_115200	//here
#else
        .baud_rate    = NRF_UARTE_BAUDRATE_115200
#endif
    };
    uart0.comm_params = &comm_params_0;
	err_code = app_uart_init(&uart0, &uart0_buffers, APP_IRQ_PRIORITY_LOWEST);
	APP_ERROR_CHECK(err_code);
}
